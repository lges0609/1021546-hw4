##Multicore Programming
------
###在單核心系統的並行執行
------
####在一個單運算核心的系統,並行執行只表示執行緒的執行是隨著時間交錯地執行
![DEMO](./照片/Figure4.3.png)
###在多核心系統的平行執行
------
####在一個多運算核心的系統,並行執行只表示執行緒的執行可以平行的執行,因為系統可以指定一個單獨的執行緒給每一個核心
![DEMO](./照片/Figure4.4.png)

>藉由講義 lecture_4_multithreaded programming P11

##多核心程式撰寫
------
**如果一個系統能同時執行一個以上的任務時就是平行; 反之,一個並行系統藉由允許所有的任務有進展來支援一個以上的任務**
**因此,有可能有並行但沒有平行, 在SMP和多核心架構來臨前,大部分的電腦系統只有一個單一個處理器,**
**CPU 排班器被設計成藉由快速地在系統的行程間切換來提供並行的錯覺,因此允許每一個行程有進展,** 
**這些行程並行地執行,但不是平行**

>藉由課本 4.2 節

##Concurrency
------
======
並行性(Concurrency)是指在一個系統中，擁有多個計算，這些計算有同時執行的特性，而且他們之間有著潛在的互動。
並行計算可能會在在具備多核心的同一個晶片中複合執行，以優先分時執行緒(preemptively time-shared threads)
在同一個處理器中執行，或在不同的處理器執行。

一些數理模型已經為解決一般的並行計算問題而發展，包括佩特里網(Petri nets), 進程演算(process calculi), 
PRAM模型(the Parallel Random Access Machine model), 參與者模式(the Actor model) and the Reo Coordination Language.
>藉由 [wiki](https://en.wikipedia.org/wiki/Concurrency_(computer_science))



##Parallelism
------
平行計算（parallel computing）一般是指許多指令得以同時進行的計算模式。在同時進行的前提下，可以將計算的過程分解成小部份，之後以並行(concurrently)方式來加以解決。

並行已經採用了多年，主要是在高性能計算，但有興趣在於它近來成長由於物理限制防止頻率縮放。隨著功率消耗（和因此的熱產生）通過計算機已成為一個關注近年來，並行計算已經成為在計算機體系結構中的主導模式，主要是在多核心處理器的形式。

電腦軟體可以被分成數個運算步驟來執行。為了解決某個特定問題，軟體採用某個演算法，以一連串指令執行來完成。傳統上，這些指令都被送至單一的中央處理器，以循序方式執行完成。在這種處理方式下，單一時間中，只有單一指令被執行。平行運算採用了多個運算單元，同時執行，以解決問題。
>藉由 [wiki](https://en.wikipedia.org/wiki/Parallel_computing)


##Difference between Parallel and Concurrent
------
